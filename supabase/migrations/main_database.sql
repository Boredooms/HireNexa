-- WARNING: This schema is for context only and is not meant to be run.
-- Table order and constraints may not be valid for execution.

CREATE TABLE public.admin_actions (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  admin_id text NOT NULL,
  action_type text NOT NULL CHECK (action_type = ANY (ARRAY['user_suspend'::text, 'user_activate'::text, 'assignment_approve'::text, 'assignment_reject'::text, 'payment_override'::text, 'certificate_revoke'::text, 'dispute_resolve'::text])),
  target_type text NOT NULL CHECK (target_type = ANY (ARRAY['user'::text, 'assignment'::text, 'submission'::text, 'payment'::text, 'certificate'::text])),
  target_id uuid NOT NULL,
  reason text NOT NULL,
  metadata jsonb,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT admin_actions_pkey PRIMARY KEY (id),
  CONSTRAINT admin_actions_admin_id_fkey FOREIGN KEY (admin_id) REFERENCES public.users(id)
);
CREATE TABLE public.applications (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  assignment_id uuid NOT NULL,
  candidate_id text NOT NULL,
  cover_letter text CHECK (char_length(cover_letter) >= 50),
  portfolio_url text,
  resume_ipfs text,
  expected_salary integer,
  available_from date,
  ai_match_score integer CHECK (ai_match_score >= 0 AND ai_match_score <= 100),
  ai_match_reasons ARRAY,
  skill_match_percentage integer,
  status text DEFAULT 'pending'::text CHECK (status = ANY (ARRAY['pending'::text, 'reviewing'::text, 'shortlisted'::text, 'interviewing'::text, 'offered'::text, 'accepted'::text, 'rejected'::text, 'withdrawn'::text])),
  employer_viewed boolean DEFAULT false,
  employer_notes text,
  blockchain_tx_hash text,
  applied_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  reviewed_at timestamp with time zone,
  CONSTRAINT applications_pkey PRIMARY KEY (id),
  CONSTRAINT applications_candidate_id_fkey FOREIGN KEY (candidate_id) REFERENCES public.users(id),
  CONSTRAINT applications_assignment_id_fkey FOREIGN KEY (assignment_id) REFERENCES public.assignments(id)
);
CREATE TABLE public.assignment_matches (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  assignment_id uuid NOT NULL,
  candidate_id text NOT NULL,
  overall_match_score integer CHECK (overall_match_score >= 0 AND overall_match_score <= 100),
  skill_match_score integer,
  experience_match_score integer,
  location_match_score integer,
  matched_skills ARRAY,
  missing_skills ARRAY,
  match_reasons ARRAY,
  ai_recommendation text,
  notified boolean DEFAULT false,
  viewed boolean DEFAULT false,
  applied boolean DEFAULT false,
  dismissed boolean DEFAULT false,
  created_at timestamp with time zone DEFAULT now(),
  notified_at timestamp with time zone,
  viewed_at timestamp with time zone,
  CONSTRAINT assignment_matches_pkey PRIMARY KEY (id),
  CONSTRAINT job_matches_candidate_id_fkey FOREIGN KEY (candidate_id) REFERENCES public.users(id),
  CONSTRAINT assignment_matches_assignment_id_fkey FOREIGN KEY (assignment_id) REFERENCES public.assignments(id)
);
CREATE TABLE public.assignment_submissions (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  assignment_id uuid NOT NULL,
  candidate_id text NOT NULL,
  github_pr_url text NOT NULL,
  github_commit_hash text,
  submission_notes text,
  code_diff_ipfs text,
  ai_verification_score integer CHECK (ai_verification_score >= 0 AND ai_verification_score <= 100),
  ai_verification_report jsonb,
  github_checks_passed boolean DEFAULT false,
  github_checks_data jsonb,
  manual_review_required boolean DEFAULT true,
  reviewer_id text,
  review_status text DEFAULT 'pending'::text CHECK (review_status = ANY (ARRAY['pending'::text, 'reviewing'::text, 'approved'::text, 'rejected'::text, 'revision_requested'::text])),
  review_notes text,
  is_winner boolean DEFAULT false,
  reward_paid boolean DEFAULT false,
  reward_tx_hash text,
  certificate_minted boolean DEFAULT false,
  certificate_nft_id text,
  certificate_ipfs text,
  submitted_at timestamp with time zone DEFAULT now(),
  reviewed_at timestamp with time zone,
  approved_at timestamp with time zone,
  blockchain_submission_id integer,
  blockchain_tx_hash text,
  CONSTRAINT assignment_submissions_pkey PRIMARY KEY (id),
  CONSTRAINT assignment_submissions_assignment_id_fkey FOREIGN KEY (assignment_id) REFERENCES public.assignments(id),
  CONSTRAINT assignment_submissions_candidate_id_fkey FOREIGN KEY (candidate_id) REFERENCES public.users(id),
  CONSTRAINT assignment_submissions_reviewer_id_fkey FOREIGN KEY (reviewer_id) REFERENCES public.users(id)
);
CREATE TABLE public.assignments (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  employer_id text NOT NULL,
  title text NOT NULL CHECK (char_length(title) >= 10),
  description text NOT NULL CHECK (char_length(description) >= 50),
  company_name text NOT NULL,
  company_logo_url text,
  location text,
  remote_type text CHECK (remote_type = ANY (ARRAY['remote'::text, 'hybrid'::text, 'onsite'::text])),
  employment_type text DEFAULT 'contract'::text CHECK (employment_type = ANY (ARRAY['full-time'::text, 'part-time'::text, 'contract'::text, 'internship'::text])),
  salary_min integer,
  salary_max integer,
  salary_currency text DEFAULT 'USD'::text,
  payment_in_cusd boolean DEFAULT false,
  required_skills ARRAY NOT NULL,
  required_skill_levels jsonb,
  min_experience_years integer,
  education_level text,
  blockchain_job_id integer,
  blockchain_tx_hash text,
  escrow_amount numeric,
  status text DEFAULT 'active'::text CHECK (status = ANY (ARRAY['draft'::text, 'active'::text, 'paused'::text, 'closed'::text, 'filled'::text])),
  applications_count integer DEFAULT 0,
  views_count integer DEFAULT 0,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  expires_at timestamp with time zone,
  filled_at timestamp with time zone,
  assignment_type text CHECK (assignment_type = ANY (ARRAY['bug_fix'::text, 'feature_implementation'::text, 'code_review'::text, 'documentation'::text, 'testing'::text])),
  github_repo_url text,
  github_issue_url text,
  difficulty_level text CHECK (difficulty_level = ANY (ARRAY['beginner'::text, 'intermediate'::text, 'advanced'::text, 'expert'::text])),
  estimated_hours integer,
  reward_amount numeric NOT NULL DEFAULT 0,
  reward_currency text DEFAULT 'CELO'::text,
  max_submissions integer DEFAULT 1,
  current_submissions integer DEFAULT 0,
  auto_verify boolean DEFAULT false,
  verification_criteria jsonb,
  winner_id text,
  winner_selected_at timestamp with time zone,
  certificate_minted boolean DEFAULT false,
  certificate_nft_id text,
  blockchain_status text DEFAULT 'pending'::text,
  CONSTRAINT assignments_pkey PRIMARY KEY (id),
  CONSTRAINT jobs_employer_id_fkey FOREIGN KEY (employer_id) REFERENCES public.users(id)
);
CREATE TABLE public.certificates (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id text NOT NULL,
  certificate_type text NOT NULL CHECK (certificate_type = ANY (ARRAY['assignment_completion'::text, 'skill_verification'::text, 'course_completion'::text, 'achievement'::text])),
  title text NOT NULL,
  description text,
  issuer_id text NOT NULL,
  issuer_name text NOT NULL,
  related_assignment_id uuid,
  related_submission_id uuid,
  nft_token_id text,
  nft_contract_address text,
  blockchain_tx_hash text,
  metadata_ipfs text,
  image_ipfs text,
  issued_at timestamp with time zone DEFAULT now(),
  expires_at timestamp with time zone,
  revoked boolean DEFAULT false,
  revoked_at timestamp with time zone,
  revocation_reason text,
  CONSTRAINT certificates_pkey PRIMARY KEY (id),
  CONSTRAINT certificates_related_assignment_id_fkey FOREIGN KEY (related_assignment_id) REFERENCES public.assignments(id),
  CONSTRAINT certificates_related_submission_id_fkey FOREIGN KEY (related_submission_id) REFERENCES public.assignment_submissions(id),
  CONSTRAINT certificates_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id),
  CONSTRAINT certificates_issuer_id_fkey FOREIGN KEY (issuer_id) REFERENCES public.users(id)
);
CREATE TABLE public.credentials (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id text NOT NULL,
  credential_type text NOT NULL,
  title text NOT NULL,
  description text,
  issuer text,
  issued_at timestamp without time zone DEFAULT now(),
  expires_at timestamp without time zone,
  metadata_ipfs text,
  blockchain_tx_hash text,
  nft_token_id text,
  revoked boolean DEFAULT false,
  created_at timestamp without time zone DEFAULT now(),
  updated_at timestamp without time zone DEFAULT now(),
  CONSTRAINT credentials_pkey PRIMARY KEY (id),
  CONSTRAINT credentials_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id)
);
CREATE TABLE public.github_connections (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id text NOT NULL UNIQUE,
  github_username text NOT NULL,
  access_token text NOT NULL,
  connected_at timestamp without time zone DEFAULT now(),
  updated_at timestamp without time zone DEFAULT now(),
  CONSTRAINT github_connections_pkey PRIMARY KEY (id),
  CONSTRAINT github_connections_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id)
);
CREATE TABLE public.messages (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  conversation_id uuid NOT NULL,
  sender_id text NOT NULL,
  receiver_id text NOT NULL,
  message_text text NOT NULL CHECK (char_length(message_text) >= 1 AND char_length(message_text) <= 5000),
  message_type text DEFAULT 'text'::text CHECK (message_type = ANY (ARRAY['text'::text, 'file'::text, 'system'::text])),
  file_ipfs text,
  read boolean DEFAULT false,
  read_at timestamp with time zone,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT messages_pkey PRIMARY KEY (id),
  CONSTRAINT messages_sender_id_fkey FOREIGN KEY (sender_id) REFERENCES public.users(id),
  CONSTRAINT messages_receiver_id_fkey FOREIGN KEY (receiver_id) REFERENCES public.users(id)
);
CREATE TABLE public.notifications (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id text NOT NULL,
  type text NOT NULL,
  title text NOT NULL,
  message text NOT NULL,
  data jsonb,
  read boolean DEFAULT false,
  created_at timestamp without time zone DEFAULT now(),
  CONSTRAINT notifications_pkey PRIMARY KEY (id),
  CONSTRAINT notifications_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id)
);
CREATE TABLE public.payments (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  payer_id text NOT NULL,
  payee_id text NOT NULL,
  amount numeric NOT NULL,
  currency text DEFAULT 'cUSD'::text,
  payment_type text NOT NULL CHECK (payment_type = ANY (ARRAY['assignment_reward'::text, 'skill_verification'::text, 'milestone'::text, 'refund'::text, 'peer_review'::text])),
  related_assignment_id uuid,
  related_application_id uuid,
  related_verification_id uuid,
  blockchain_tx_hash text NOT NULL,
  blockchain_status text DEFAULT 'pending'::text CHECK (blockchain_status = ANY (ARRAY['pending'::text, 'confirmed'::text, 'failed'::text])),
  status text DEFAULT 'pending'::text CHECK (status = ANY (ARRAY['pending'::text, 'completed'::text, 'failed'::text, 'refunded'::text])),
  created_at timestamp with time zone DEFAULT now(),
  completed_at timestamp with time zone,
  CONSTRAINT payments_pkey PRIMARY KEY (id),
  CONSTRAINT payments_payer_id_fkey FOREIGN KEY (payer_id) REFERENCES public.users(id),
  CONSTRAINT payments_payee_id_fkey FOREIGN KEY (payee_id) REFERENCES public.users(id),
  CONSTRAINT payments_related_job_id_fkey FOREIGN KEY (related_assignment_id) REFERENCES public.assignments(id),
  CONSTRAINT payments_related_application_id_fkey FOREIGN KEY (related_application_id) REFERENCES public.applications(id),
  CONSTRAINT payments_related_verification_id_fkey FOREIGN KEY (related_verification_id) REFERENCES public.skill_verifications(id)
);
CREATE TABLE public.phone_mappings (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id text NOT NULL UNIQUE,
  phone_hash text NOT NULL UNIQUE,
  encrypted_phone text NOT NULL,
  wallet_address text NOT NULL,
  verified boolean DEFAULT false,
  verification_code_hash text,
  verification_attempts integer DEFAULT 0,
  last_verification_attempt timestamp with time zone,
  active boolean DEFAULT true,
  created_at timestamp with time zone DEFAULT now(),
  verified_at timestamp with time zone,
  CONSTRAINT phone_mappings_pkey PRIMARY KEY (id),
  CONSTRAINT phone_mappings_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id)
);
CREATE TABLE public.portfolio_update_requests (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id text NOT NULL,
  portfolio_id uuid,
  token_id integer NOT NULL,
  reason text,
  status text DEFAULT 'pending'::text,
  completed_at timestamp without time zone,
  created_at timestamp without time zone DEFAULT now(),
  CONSTRAINT portfolio_update_requests_pkey PRIMARY KEY (id),
  CONSTRAINT portfolio_update_requests_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id),
  CONSTRAINT portfolio_update_requests_portfolio_id_fkey FOREIGN KEY (portfolio_id) REFERENCES public.portfolios(id)
);
CREATE TABLE public.portfolios (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id text NOT NULL,
  ipfs_hash text NOT NULL,
  title text,
  description text,
  visibility text DEFAULT 'private'::text,
  nft_token_id integer,
  blockchain_tx_hash text,
  wallet_address text,
  version integer DEFAULT 1,
  auto_update_enabled boolean DEFAULT false,
  auto_update_interval_days integer DEFAULT 90,
  last_sync_at timestamp without time zone,
  created_at timestamp without time zone DEFAULT now(),
  updated_at timestamp without time zone DEFAULT now(),
  nft_minted_at timestamp with time zone,
  CONSTRAINT portfolios_pkey PRIMARY KEY (id),
  CONSTRAINT portfolios_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id)
);
CREATE TABLE public.projects (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id text NOT NULL,
  name text NOT NULL,
  description text,
  url text,
  github_url text,
  technologies ARRAY,
  stars integer,
  forks integer,
  is_featured boolean DEFAULT false,
  ai_analysis text,
  impact_statement text,
  created_at timestamp without time zone DEFAULT now(),
  updated_at timestamp without time zone DEFAULT now(),
  CONSTRAINT projects_pkey PRIMARY KEY (id),
  CONSTRAINT projects_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id)
);
CREATE TABLE public.realtime_events (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id text NOT NULL,
  event_type text NOT NULL,
  event_data jsonb NOT NULL,
  processed boolean DEFAULT false,
  processed_at timestamp with time zone,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT realtime_events_pkey PRIMARY KEY (id),
  CONSTRAINT realtime_events_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id)
);
CREATE TABLE public.recruiter_permissions (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id text NOT NULL UNIQUE,
  company_name text NOT NULL,
  can_post_assignments boolean DEFAULT true,
  can_review_submissions boolean DEFAULT true,
  can_issue_certificates boolean DEFAULT true,
  can_make_payments boolean DEFAULT true,
  max_assignment_reward numeric DEFAULT 100,
  is_verified boolean DEFAULT false,
  is_suspended boolean DEFAULT false,
  suspension_reason text,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT recruiter_permissions_pkey PRIMARY KEY (id),
  CONSTRAINT recruiter_permissions_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id)
);
CREATE TABLE public.skill_barter_proposals (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  proposer_id text NOT NULL,
  recipient_id text NOT NULL,
  skill_offered text NOT NULL,
  skill_requested text NOT NULL,
  duration integer NOT NULL,
  description text,
  status text DEFAULT 'pending'::text CHECK (status = ANY (ARRAY['pending'::text, 'accepted'::text, 'rejected'::text, 'completed'::text, 'cancelled'::text])),
  created_at timestamp with time zone DEFAULT now(),
  accepted_at timestamp with time zone,
  completed_at timestamp with time zone,
  rejected_at timestamp with time zone,
  blockchain_barter_id bigint,
  blockchain_tx_hash text,
  deposit_amount text,
  acceptance_tx_hash text,
  CONSTRAINT skill_barter_proposals_pkey PRIMARY KEY (id)
);
CREATE TABLE public.skill_barter_records (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  proposal_id uuid,
  proposer_id text NOT NULL,
  recipient_id text NOT NULL,
  skill_offered text NOT NULL,
  skill_requested text NOT NULL,
  duration text NOT NULL,
  description text,
  blockchain_tx_hash text,
  nft_token_id text,
  ipfs_hash text,
  status text DEFAULT 'active'::text CHECK (status = ANY (ARRAY['active'::text, 'completed'::text, 'cancelled'::text])),
  started_at timestamp with time zone DEFAULT now(),
  completed_at timestamp with time zone,
  rating_by_proposer integer CHECK (rating_by_proposer >= 1 AND rating_by_proposer <= 5),
  rating_by_recipient integer CHECK (rating_by_recipient >= 1 AND rating_by_recipient <= 5),
  review_by_proposer text,
  review_by_recipient text,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT skill_barter_records_pkey PRIMARY KEY (id),
  CONSTRAINT skill_barter_records_proposal_id_fkey FOREIGN KEY (proposal_id) REFERENCES public.skill_barter_proposals(id)
);
CREATE TABLE public.skill_exchange_messages (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  match_id text NOT NULL,
  sender_id text NOT NULL,
  sender_name text NOT NULL,
  message text NOT NULL,
  type text DEFAULT 'text'::text CHECK (type = ANY (ARRAY['text'::text, 'barter-proposal'::text, 'barter-accepted'::text, 'system'::text])),
  read boolean DEFAULT false,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT skill_exchange_messages_pkey PRIMARY KEY (id)
);
CREATE TABLE public.skill_exchange_profiles (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id text NOT NULL UNIQUE,
  name text NOT NULL,
  avatar_url text,
  bio text,
  skills_offered ARRAY DEFAULT '{}'::text[],
  skills_wanted ARRAY DEFAULT '{}'::text[],
  interests ARRAY DEFAULT '{}'::text[],
  experience_level text CHECK (experience_level = ANY (ARRAY['beginner'::text, 'intermediate'::text, 'advanced'::text, 'expert'::text])),
  availability text,
  online boolean DEFAULT false,
  last_active timestamp with time zone DEFAULT now(),
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT skill_exchange_profiles_pkey PRIMARY KEY (id)
);
CREATE TABLE public.skill_learning_progress (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id text NOT NULL,
  barter_record_id uuid,
  skill_name text NOT NULL,
  learned_from_user_id text,
  progress_percentage integer DEFAULT 0 CHECK (progress_percentage >= 0 AND progress_percentage <= 100),
  milestones jsonb DEFAULT '[]'::jsonb,
  notes text,
  started_at timestamp with time zone DEFAULT now(),
  completed_at timestamp with time zone,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT skill_learning_progress_pkey PRIMARY KEY (id),
  CONSTRAINT skill_learning_progress_barter_record_id_fkey FOREIGN KEY (barter_record_id) REFERENCES public.skill_barter_records(id)
);
CREATE TABLE public.skill_recommendations (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id text NOT NULL,
  skill_name text NOT NULL,
  reason text NOT NULL,
  priority text NOT NULL,
  created_at timestamp without time zone DEFAULT now(),
  CONSTRAINT skill_recommendations_pkey PRIMARY KEY (id),
  CONSTRAINT skill_recommendations_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id)
);
CREATE TABLE public.skill_verifications (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  skill_id uuid NOT NULL,
  user_id text NOT NULL,
  verifier_id text NOT NULL,
  verified boolean NOT NULL,
  confidence_score integer CHECK (confidence_score >= 0 AND confidence_score <= 100),
  verification_notes text CHECK (char_length(verification_notes) >= 20),
  evidence_reviewed ARRAY,
  blockchain_tx_hash text,
  blockchain_attestation_id integer,
  payment_amount numeric,
  payment_tx_hash text,
  status text DEFAULT 'pending'::text CHECK (status = ANY (ARRAY['pending'::text, 'completed'::text, 'disputed'::text, 'revoked'::text])),
  created_at timestamp with time zone DEFAULT now(),
  completed_at timestamp with time zone,
  payment_currency text DEFAULT 'CELO'::text,
  network text DEFAULT 'celo-sepolia'::text,
  CONSTRAINT skill_verifications_pkey PRIMARY KEY (id),
  CONSTRAINT skill_verifications_skill_id_fkey FOREIGN KEY (skill_id) REFERENCES public.skills(id),
  CONSTRAINT skill_verifications_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id),
  CONSTRAINT skill_verifications_verifier_id_fkey FOREIGN KEY (verifier_id) REFERENCES public.users(id)
);
CREATE TABLE public.skills (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id text NOT NULL,
  skill_name text NOT NULL,
  confidence_score integer CHECK (confidence_score >= 0 AND confidence_score <= 100),
  category text,
  level text,
  source text,
  evidence ARRAY,
  evidence_ipfs text,
  example_repos ARRAY,
  verified_at timestamp without time zone,
  revoked boolean DEFAULT false,
  created_at timestamp without time zone DEFAULT now(),
  updated_at timestamp without time zone DEFAULT now(),
  ai_verified boolean DEFAULT false,
  ai_generated_code boolean DEFAULT false,
  CONSTRAINT skills_pkey PRIMARY KEY (id),
  CONSTRAINT skills_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id)
);
CREATE TABLE public.sync_status (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id text NOT NULL,
  source text NOT NULL,
  last_sync_at timestamp without time zone,
  status text,
  error_message text,
  created_at timestamp without time zone DEFAULT now(),
  updated_at timestamp without time zone DEFAULT now(),
  metadata jsonb,
  CONSTRAINT sync_status_pkey PRIMARY KEY (id),
  CONSTRAINT sync_status_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id)
);
CREATE TABLE public.users (
  id text NOT NULL,
  email text NOT NULL UNIQUE,
  full_name text,
  bio text,
  avatar_url text,
  github_username text,
  linkedin_url text,
  wallet_address text,
  professional_summary text,
  career_level text,
  key_strengths ARRAY,
  created_at timestamp without time zone DEFAULT now(),
  updated_at timestamp without time zone DEFAULT now(),
  role text DEFAULT 'student'::text CHECK (role = ANY (ARRAY['student'::text, 'recruiter'::text, 'admin'::text, 'verifier'::text])),
  is_admin boolean DEFAULT false,
  is_recruiter boolean DEFAULT false,
  CONSTRAINT users_pkey PRIMARY KEY (id)
);
CREATE TABLE public.verifier_reputation (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  verifier_id text NOT NULL UNIQUE,
  overall_score integer DEFAULT 0 CHECK (overall_score >= 0 AND overall_score <= 100),
  accuracy_score integer DEFAULT 0,
  response_time_score integer DEFAULT 0,
  thoroughness_score integer DEFAULT 0,
  total_verifications integer DEFAULT 0,
  successful_verifications integer DEFAULT 0,
  disputed_verifications integer DEFAULT 0,
  average_verification_time integer,
  total_earned_cusd numeric DEFAULT 0,
  is_authorized boolean DEFAULT false,
  is_suspended boolean DEFAULT false,
  suspension_reason text,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  last_verification_at timestamp with time zone,
  CONSTRAINT verifier_reputation_pkey PRIMARY KEY (id),
  CONSTRAINT verifier_reputation_verifier_id_fkey FOREIGN KEY (verifier_id) REFERENCES public.users(id)
);
CREATE TABLE public.video_call_sessions (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  initiator_id text NOT NULL,
  recipient_id text NOT NULL,
  session_token text NOT NULL,
  status text DEFAULT 'pending'::text CHECK (status = ANY (ARRAY['pending'::text, 'active'::text, 'ended'::text, 'missed'::text])),
  started_at timestamp with time zone,
  ended_at timestamp with time zone,
  duration_seconds integer,
  barter_proposed boolean DEFAULT false,
  barter_proposal_id uuid,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT video_call_sessions_pkey PRIMARY KEY (id),
  CONSTRAINT video_call_sessions_barter_proposal_id_fkey FOREIGN KEY (barter_proposal_id) REFERENCES public.skill_barter_proposals(id)
);